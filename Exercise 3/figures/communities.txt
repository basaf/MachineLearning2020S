start communities
iteration: 1; no improve: 1; solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 2; no improve: 2; solution: ({'hidden_layer_sizes': 4, 'activation': 'logistic'}, 0.5644388908610183, 'neural network', 13); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 3; no improve: 3; solution: ({'hidden_layer_sizes': 4, 'activation': 'identity'}, 0.5921085887508395, 'neural network', 12); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 4; no improve: 4; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 2, 'min_samples_leaf': 8, 'bootstrap': True}, 0.6061998868854519, 'random forest', 734); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 5; no improve: 5; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 2, 'min_samples_leaf': 7, 'bootstrap': True}, 0.6126559867368572, 'random forest', 732); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 6; no improve: 6; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 2, 'min_samples_leaf': 6, 'bootstrap': True}, 0.6180327308910053, 'random forest', 730); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 7; no improve: 7; solution: ({'hidden_layer_sizes': 5, 'activation': 'relu'}, 0.5481714025107871, 'neural network', 19); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 8; no improve: 8; solution: ({'hidden_layer_sizes': 6, 'activation': 'logistic'}, 0.5867093585804619, 'neural network', 21); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 9; no improve: 9; solution: ({'hidden_layer_sizes': 6, 'activation': 'relu'}, 0.6123696221721542, 'neural network', 23); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 10; no improve: 10; solution: ({'alpha': 0.6000000000000001, 'fit_intercept': True, 'normalize': True}, 0.614678515487111, 'ridge', 24); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 11; no improve: 11; solution: ({'alpha': 0.5, 'fit_intercept': False, 'normalize': True}, 0.6415786627001561, 'ridge', 22); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 12; no improve: 12; solution: ({'n_neighbors': 41, 'weights': 'uniform', 'p': 2}, 0.5545931980669394, 'knn', 161); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 13; no improve: 13; solution: ({'n_neighbors': 41, 'weights': 'distance', 'p': 1}, 0.5684770381488593, 'knn', 162); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 14; no improve: 14; solution: ({'kernel': 'linear', 'degree': 5, 'C': 35.01}, 0.6340734976212774, 'svm', 335); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 15; no improve: 15; solution: ({'kernel': 'linear', 'degree': 5, 'C': 34.01}, 0.6347533835427475, 'svm', 334); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 16; no improve: 16; solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 2, 'min_samples_leaf': 6, 'bootstrap': True}, 0.6171304021311959, 'random forest', 442); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 17; no improve: 17; solution: ({'hidden_layer_sizes': 4, 'activation': 'tanh'}, 0.5848379328957233, 'neural network', 14); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 18; no improve: 18; solution: ({'n_estimators': 200, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 8, 'bootstrap': False}, 0.4246799007620623, 'random forest', 1095); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 19; no improve: 19; solution: ({'n_estimators': 200, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 8, 'bootstrap': True}, 0.6081604760264021, 'random forest', 1094); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 20; no improve: 20; solution: ({'n_estimators': 200, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 7, 'bootstrap': True}, 0.6105169289991816, 'random forest', 1092); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
iteration: 21; no improve: 21; solution: ({'n_estimators': 200, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 6, 'bootstrap': True}, 0.6135212318763483, 'random forest', 1090); best solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.6420569921776809, 'ridge', 10)
end communities