start estate
iteration: 1; no improve: 1; solution: ({'kernel': 'poly', 'degree': 3, 'C': 97.01}, 0.5844783757844112, 'svm', 997); best solution: ({'kernel': 'poly', 'degree': 3, 'C': 97.01}, 0.5844783757844112, 'svm', 997)
iteration: 2; no improve: 1; solution: ({'kernel': 'poly', 'degree': 3, 'C': 99.01}, 0.5846913502747915, 'svm', 999); best solution: ({'kernel': 'poly', 'degree': 3, 'C': 99.01}, 0.5846913502747915, 'svm', 999)
iteration: 3; no improve: 1; solution: ({'alpha': 0.0, 'fit_intercept': True, 'normalize': True}, 0.5977757622150943, 'ridge', 0); best solution: ({'alpha': 0.0, 'fit_intercept': True, 'normalize': True}, 0.5977757622150943, 'ridge', 0)
iteration: 4; no improve: 1; solution: ({'alpha': 0.0, 'fit_intercept': False, 'normalize': True}, 0.6066799599090106, 'ridge', 2); best solution: ({'alpha': 0.0, 'fit_intercept': False, 'normalize': True}, 0.6066799599090106, 'ridge', 2)
iteration: 5; no improve: 1; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 6, 'bootstrap': False}, 0.6811929886236048, 'random forest', 749); best solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 6, 'bootstrap': False}, 0.6811929886236048, 'random forest', 749)
iteration: 6; no improve: 1; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168007, 'random forest', 750); best solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168007, 'random forest', 750)
iteration: 7; no improve: 2; solution: ({'n_neighbors': 55, 'weights': 'distance', 'p': 2}, 0.6445713027296028, 'knn', 219); best solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168007, 'random forest', 750)
iteration: 8; no improve: 3; solution: ({'n_neighbors': 55, 'weights': 'distance', 'p': 1}, 0.6587014768803323, 'knn', 218); best solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168007, 'random forest', 750)
iteration: 9; no improve: 4; solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 3, 'bootstrap': False}, 0.6053758686298198, 'random forest', 509); best solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 3, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168007, 'random forest', 750)
iteration: 10; no improve: 1; solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 11; no improve: 2; solution: ({'hidden_layer_sizes': 1, 'activation': 'relu'}, -8.76729860984908, 'neural network', 3); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 12; no improve: 3; solution: ({'hidden_layer_sizes': 1, 'activation': 'tanh'}, -7.956847796185938, 'neural network', 2); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 13; no improve: 4; solution: ({'n_neighbors': 20, 'weights': 'distance', 'p': 2}, 0.6631638753937221, 'knn', 79); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 14; no improve: 5; solution: ({'n_neighbors': 20, 'weights': 'distance', 'p': 1}, 0.6735011301713069, 'knn', 78); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 15; no improve: 6; solution: ({'kernel': 'poly', 'degree': 3, 'C': 91.01}, 0.5835084871801173, 'svm', 991); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 16; no improve: 7; solution: ({'kernel': 'poly', 'degree': 3, 'C': 93.01}, 0.5836754128207491, 'svm', 993); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 17; no improve: 8; solution: ({'kernel': 'poly', 'degree': 3, 'C': 95.01}, 0.5840675076534501, 'svm', 995); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 18; no improve: 9; solution: ({'kernel': 'poly', 'degree': 3, 'C': 96.01}, 0.5843396416604801, 'svm', 996); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 19; no improve: 10; solution: ({'kernel': 'poly', 'degree': 3, 'C': 98.01}, 0.5845878535467646, 'svm', 998); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 20; no improve: 11; solution: ({'kernel': 'poly', 'degree': 3, 'C': 99.01}, 0.5846913502747915, 'svm', 999); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 21; no improve: 12; solution: ({'n_neighbors': 94, 'weights': 'distance', 'p': 1}, 0.6444229288215775, 'knn', 374); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 22; no improve: 13; solution: ({'alpha': 0.2, 'fit_intercept': False, 'normalize': True}, 0.5899867684488642, 'ridge', 10); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 23; no improve: 14; solution: ({'n_estimators': 20, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 1, 'bootstrap': False}, 0.6716933251823296, 'random forest', 217); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 24; no improve: 15; solution: ({'n_estimators': 20, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 1, 'bootstrap': True}, 0.7346472778072081, 'random forest', 216); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 25; no improve: 16; solution: ({'hidden_layer_sizes': 8, 'activation': 'identity'}, -35.40370479402966, 'neural network', 28); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 26; no improve: 17; solution: ({'hidden_layer_sizes': 8, 'activation': 'tanh'}, -7.490397060873084, 'neural network', 30); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 27; no improve: 18; solution: ({'hidden_layer_sizes': 9, 'activation': 'identity'}, 0.04608553766889789, 'neural network', 32); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 28; no improve: 19; solution: ({'n_neighbors': 36, 'weights': 'distance', 'p': 1}, 0.6604109456059986, 'knn', 142); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 29; no improve: 20; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 8, 'min_samples_leaf': 8, 'bootstrap': True}, 0.7414565938519471, 'random forest', 842); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
iteration: 30; no improve: 21; solution: ({'n_estimators': 100, 'criterion': 'mae', 'min_samples_split': 8, 'min_samples_leaf': 7, 'bootstrap': True}, 0.7476104082168005, 'random forest', 840); best solution: ({'n_estimators': 50, 'criterion': 'mae', 'min_samples_split': 6, 'min_samples_leaf': 4, 'bootstrap': True}, 0.7550887703025442, 'random forest', 510)
end estate
